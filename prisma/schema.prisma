// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 知识库
model Dataset {
  id                       String @id @default(uuid())
  name                     String @unique
  description              String?
  provider                 String @default("vendor")
  dataSourceType           String?
  indexStruct              Json?
  embeddingModel           String @default("text-embedding-ada-002")
  embeddingModelProvider   String @default("openai")
  retrievalModel           Json?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  processRule              DatasetProcessRule?

  documents                Document[]
  segments                 DocumentSegment[]
  Assistant                Assistant[]

  @@index([provider])
  @@index([dataSourceType])
}

/// 知识库处理规则
model DatasetProcessRule {
  id         String @id @default(uuid())
  datasetId  String @unique
  mode       String
  rules      Json?
  createdAt  DateTime @default(now())
  
  dataset    Dataset @relation(fields: [datasetId], references: [id])

  @@index([datasetId])
  @@index([mode])
}

/// 文档段落
model DocumentSegment {
  id              String @id @default(uuid())
  datasetId       String
  documentId      String
  position        Int
  content         String
  wordCount       Int
  tokens          Int
  keywords        Json?
  indexNodeId     String?
  indexNodeHash   String?
  hitCount        Int @default(0)
  enabled         Boolean @default(true)
  disabledAt      DateTime?
  status          String
  error           String?
  answer          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  dataset         Dataset @relation(fields: [datasetId], references: [id])
  document        Document @relation(fields: [documentId], references: [id])

  @@unique([datasetId, indexNodeHash])
  @@index([datasetId])
  @@index([documentId])
  @@index([enabled])
  @@index([datasetId, enabled])
}

/// 文档
model Document {
  id                       String @id @default(uuid())
  datasetId                String
  position                 Int
  dataSourceType           String
  dataSourceInfo           Json?
  datasetProcessRuleId     String?
  name                     String
  createdFrom              String
  createdApiRequestId      String?
  fileId                   String?
  wordCount                Int?
  tokens                   Int?
  indexingLatency          Float?
  enabled                  Boolean @default(true)
  disabledAt               DateTime?
  archived                 Boolean @default(false)
  archivedReason           String?
  archivedAt               DateTime?
  docType                  String?
  docMetadata              Json?
  docForm                  String?
  docLanguage              String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  dataset                  Dataset @relation(fields: [datasetId], references: [id])
  segments                 DocumentSegment[]

  @@index([datasetId])
  @@index([enabled])
  @@index([archived])
  @@index([datasetId, enabled, archived])
}

/// 上传文件
model UploadFile {
  id             String @id @default(uuid())
  storageType    String
  key            String @unique
  name           String
  description    String?
  size           Int
  extension      String
  mimeType       String?
  used           Boolean @default(false)
  usedAt         DateTime?
  hash           String?
  createdAt      DateTime @default(now())

  @@index([storageType])
  @@index([used])
}

model Embeddings {
  id                    String @id @default(uuid())
  hash                  String
  embedding             Unsupported("vector")?
  modelName             String @default("text-embedding-3-small")
  providerName          String @default("openai")
  classPrefix           String?
  createdAt             DateTime @default(now())
  
  @@unique([classPrefix, hash])
  @@index([classPrefix])
}

/// 助手
model Assistant {
  id              String      @id @default(uuid())
  name            String      @unique
  description     String?
  systemPrompt    String?
  datasetId       String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  dataset         Dataset?     @relation(fields: [datasetId], references: [id])
  
  @@index([datasetId])
}
