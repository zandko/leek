import { LeekFile } from '../../domain/files';

/**
 * Abstract repository interface for files.
 *
 * Defines the methods for interacting with files in the data storage layer.
 *
 * **Method Order Guideline**:
 * 1. **Create**: Methods that create new records.
 * 2. **Read**: Methods that retrieve data (e.g., findMany, findById).
 * 3. **Update**: Methods that modify existing records.
 * 4. **Delete**: Methods that remove records.
 *
 * When adding new methods, place them under the appropriate CRUD category
 * to maintain logical organization and consistency.
 */
export abstract class FilesRepository {
  /**
   * Create a new file record.
   *
   * This method creates a new file record in the data store. The input data should exclude
   * `id` and `createdAt`, as these fields are typically auto-generated by the storage mechanism.
   *
   * @param {Omit<LeekFile, 'id' | 'createdAt'>} data - The data for the new file.
   * @returns {Promise<LeekFile>} - The newly created file record.
   */
  abstract createFile(data: Omit<LeekFile, 'id' | 'createdAt'>): Promise<LeekFile>;

  /**
   * Retrieve a file by its unique ID.
   *
   * This method retrieves a single file identified by its unique ID. Returns `null` if no matching
   * file is found.
   *
   * @param {string} id - The unique identifier of the file.
   * @returns {Promise<LEEK.Nullable<LeekFile>>} - The matching file record, or `null` if not found.
   */
  abstract findFileById(id: string): Promise<LEEK.Nullable<LeekFile>>;

  /**
   * Retrieve a file by its Hash
   *
   * This method retrieves a single file identified by its Hash. Returns `null` if no matching
   * file is found.
   *
   * @param {string} hash - The hash of the file.
   * @returns {Promise<LEEK.Nullable<LeekFile>>} - The matching file record, or `null` if not found.
   */
  abstract findFileByHash(hash: string): Promise<LEEK.Nullable<LeekFile>>;

  /**
   * Update the usage status of a file by its unique ID.
   *
   * This method updates the `used` status and the `usedAt` timestamp for a file identified
   * by its unique ID.
   *
   * @param {string} id - The unique identifier of the file.
   * @param {boolean} used - The usage status to set for the file.
   * @param {Date} usedAt - The timestamp indicating when the file was used.
   * @returns {Promise<void>} - Resolves when the update operation is complete.
   */
  abstract updateFileUsageStatusById(id: string, used: boolean, usedAt: Date): Promise<void>;
}
