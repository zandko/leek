import { LeekDatasetProcessRule } from '../../domain/dataset-process-rule';

/**
 * Abstract repository interface for dataset process rules.
 *
 * Defines the methods for interacting with dataset process rules in the data storage layer.
 *
 * **Method Order Guideline**:
 * 1. **Create**: Methods that create new records.
 * 2. **Read**: Methods that retrieve data (e.g., findById, findByDatasetId).
 * 3. **Update**: Methods that modify existing records.
 * 4. **Delete**: Methods that remove records.
 *
 * When adding new methods, place them under the appropriate CRUD category
 * to maintain logical organization and consistency.
 */
export abstract class DatasetProcessRuleRepository {
  /**
   * Create a new dataset process rule.
   *
   * This method creates a new dataset process rule record in the data store.
   * The input data should exclude `id` and `createdAt`, as these are typically
   * auto-generated by the storage mechanism.
   *
   * @param {Omit<LeekDatasetProcessRule, 'id' | 'createdAt'>} data - The dataset process rule data to create.
   * @returns {Promise<LeekDatasetProcessRule>} - The newly created dataset process rule.
   */
  abstract createRule(data: Omit<LeekDatasetProcessRule, 'id' | 'createdAt'>): Promise<LeekDatasetProcessRule>;

  /**
   * Retrieve a dataset process rule by its unique ID.
   *
   * This method fetches a single dataset process rule identified by its unique ID.
   * Returns `null` if no matching rule is found.
   *
   * @param {string} id - The unique identifier of the dataset process rule.
   * @returns {Promise<LEEK.Nullable<LeekDatasetProcessRule>>} - The matching rule, or `null` if not found.
   */
  abstract findRuleById(id: string): Promise<LEEK.Nullable<LeekDatasetProcessRule>>;

  /**
   * Retrieve a dataset process rule by dataset ID.
   *
   * This method fetches a dataset process rule associated with a specific dataset.
   * Returns `null` if no matching rule is found.
   *
   * @param {string} datasetId - The unique identifier of the dataset.
   * @returns {Promise<LEEK.Nullable<LeekDatasetProcessRule>>} - The matching rule, or `null` if not found.
   */
  abstract findRuleByDatasetId(datasetId: string): Promise<LEEK.Nullable<LeekDatasetProcessRule>>;

  /**
   * Update a dataset process rule by its unique ID.
   *
   * This method updates a dataset process rule record in the data store using the provided ID
   * and partial update data.
   *
   * @param {string} id - The unique identifier of the dataset process rule to update.
   * @param {Partial<LeekDatasetProcessRule>} payload - An object containing the fields to update.
   * @returns {Promise<void>} - Resolves when the update operation is complete.
   */
  abstract updateRuleById(id: string, payload: Partial<LeekDatasetProcessRule>): Promise<void>;

  /**
   * Delete a dataset process rule by its unique ID.
   *
   * This method deletes a dataset process rule identified by its unique ID.
   *
   * @param {string} id - The unique identifier of the dataset process rule to delete.
   * @returns {Promise<void>} - Resolves when the deletion operation is complete.
   */
  abstract deleteRuleById(id: string): Promise<void>;

  /**
   * Delete all dataset process rules associated with a specific dataset ID.
   *
   * This method removes all dataset process rules linked to the given dataset ID.
   *
   * @param {string} datasetId - The unique identifier of the dataset whose rules are to be deleted.
   * @returns {Promise<void>} - Resolves when the deletion operation is complete.
   */
  abstract deleteRulesByDatasetId(datasetId: string): Promise<void>;
}
