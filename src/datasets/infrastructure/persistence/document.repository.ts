import { PaginatedResult, QueryParams } from '@leek/interfaces';

import { LeekDocument } from '../../domain/document';

/**
 * Abstract repository interface for documents.
 *
 * Defines the methods for interacting with documents in the data storage layer.
 *
 * **Method Order Guideline**:
 * 1. **Create**: Methods that create new records.
 * 2. **Read**: Methods that retrieve data (e.g., findMany, findById).
 * 3. **Update**: Methods that modify existing records.
 * 4. **Delete**: Methods that remove records.
 *
 * When adding new methods, place them under the appropriate CRUD category
 * to maintain logical organization and consistency.
 */
export abstract class DocumentRepository {
  /**
   * Create a new document.
   *
   * This method creates a new document record in the data store.
   * The input data should exclude `id`, `createdAt`, and `updatedAt` fields,
   * as these are typically auto-generated by the storage mechanism.
   *
   * @param {Omit<LeekDocument, 'id' | 'createdAt' | 'updatedAt'>} data - The data for the new document.
   * @returns {Promise<LeekDocument>} - The newly created document.
   */
  abstract createDocument(data: Omit<LeekDocument, 'id' | 'createdAt' | 'updatedAt'>): Promise<LeekDocument>;

  /**
   * Retrieve paginated documents by dataset ID.
   *
   * This method retrieves documents associated with the specified dataset ID,
   * supporting pagination and optional query filters for advanced retrieval.
   *
   * @param {string} datasetId - The unique identifier of the dataset.
   * @param {QueryParams<LeekDocument>} [queryParams] - Optional parameters for pagination and filtering.
   * @returns {Promise<PaginatedResult<LeekDocument>>} - The paginated result of documents.
   */
  abstract findManyDocumentsPaginatedByDatasetId(
    datasetId: string,
    queryParams?: QueryParams<LeekDocument>,
  ): Promise<PaginatedResult<LeekDocument>>;

  /**
   * Retrieve a document by its unique ID.
   *
   * This method retrieves a single document identified by its unique ID.
   * Returns `null` if no matching document is found.
   *
   * @param {string} id - The unique identifier of the document.
   * @returns {Promise<LEEK.Nullable<LeekDocument>>} - The matching document, or `null` if not found.
   */
  abstract findDocumentById(id: string): Promise<LEEK.Nullable<LeekDocument>>;

  /**
   * Retrieve a document by its name and dataset ID.
   *
   * This method retrieves a single document identified by its name and the dataset ID it belongs to.
   * Returns `null` if no matching document is found.
   *
   * @param {string} name - The name of the document.
   * @param {string} datasetId - The unique identifier of the dataset.
   * @returns {Promise<LEEK.Nullable<LeekDocument>>} - The matching document, or `null` if not found.
   */
  abstract findDocumentByNameAndDatasetId(name: string, datasetId: string): Promise<LEEK.Nullable<LeekDocument>>;

  /**
   * Update a document by its unique ID.
   *
   * This method updates the fields of a document identified by its unique ID.
   *
   * @param {string} id - The unique identifier of the document to update.
   * @param {Partial<LeekDocument>} payload - An object containing the fields to update.
   * @returns {Promise<void>} - Resolves when the update operation is complete.
   */
  abstract updateDocumentById(id: string, payload: Partial<LeekDocument>): Promise<void>;

  /**
   * Increment word count and token count for a document.
   *
   * This method updates the word count and token count of a document by applying the specified deltas.
   *
   * @param {string} id - The unique identifier of the document.
   * @param {number} wordCountDelta - The incremental change in word count.
   * @param {number} tokensDelta - The incremental change in token count.
   * @returns {Promise<void>} - Resolves when the update operation is complete.
   */
  abstract updateWordCountAndTokensById(id: string, wordCountDelta: number, tokensDelta: number): Promise<void>;

  /**
   * Delete a document by its unique ID.
   *
   * This method deletes a single document identified by its unique ID.
   *
   * @param {string} id - The unique identifier of the document to delete.
   * @returns {Promise<void>} - Resolves when the document is deleted.
   */
  abstract deleteDocumentById(id: string): Promise<void>;

  /**
   * Delete all documents in a dataset.
   *
   * This method removes all documents associated with the specified dataset ID.
   *
   * @param {string} datasetId - The unique identifier of the dataset.
   * @returns {Promise<void>} - Resolves when all related documents are deleted.
   */
  abstract deleteManyDocumentsByDatasetId(datasetId: string): Promise<void>;

  /**
   * Rename a document by its unique ID.
   *
   * This method updates the name of a document identified by its unique ID.
   *
   * @param {string} id - The unique identifier of the document.
   * @param {string} name - The new name for the document.
   * @returns {Promise<LeekDocument>} - The updated document with the new name.
   */
  abstract renameDocumentById(id: string, name: string): Promise<LeekDocument>;

  /**
   * Count the number of documents in a dataset.
   *
   * This method counts the total number of documents associated with the specified dataset ID.
   *
   * @param {string} datasetId - The unique identifier of the dataset.
   * @returns {Promise<number>} - The total number of documents.
   */
  abstract countDocumentsByDatasetId(datasetId: string): Promise<number>;
}
