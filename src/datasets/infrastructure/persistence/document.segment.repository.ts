import { PaginatedResult, QueryParams } from '@leek/interfaces';

import { LeekSegment } from '../../domain/segment';

/**
 * Abstract repository interface for document segments.
 *
 * Defines the methods for interacting with document segments in the data storage layer.
 *
 * **Method Order Guideline**:
 * 1. **Create**: Methods that create new records or batch insert.
 * 2. **Read**: Methods that retrieve data (e.g., findById, paginated queries).
 * 3. **Update**: Methods that modify existing records or batch update.
 * 4. **Delete**: Methods that remove records.
 *
 * When adding new methods, place them under the appropriate CRUD category
 * to maintain logical organization and consistency.
 */
export abstract class DocumentSegmentRepository {
  /**
   * Create a new document segment.
   *
   * This method creates a new document segment record in the data store.
   * The input data should exclude `id`, `createdAt`, and `updatedAt` fields,
   * as these are typically auto-generated by the storage mechanism.
   *
   * @param {Omit<LeekSegment, 'id' | 'createdAt' | 'updatedAt'>} data - The data for the new segment.
   * @returns {Promise<LeekSegment>} - The created document segment.
   */
  abstract createSegment(data: Omit<LeekSegment, 'id' | 'createdAt' | 'updatedAt'>): Promise<LeekSegment>;

  /**
   * Create multiple document segments in a single operation.
   *
   * This method creates multiple document segment records in the data store.
   * Each segment's `id`, `createdAt`, and `updatedAt` fields are auto-generated by the storage mechanism.
   *
   * @param {Omit<LeekSegment, 'id' | 'createdAt' | 'updatedAt'>[]} data - An array of segment data to create.
   * @returns {Promise<void>} - Resolves when all segments are created.
   */
  abstract createManySegments(data: Omit<LeekSegment, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<void>;

  /**
   * Retrieve paginated document segments by document ID.
   *
   * This method retrieves document segments associated with the specified document ID.
   * supporting pagination and optional query filters for advanced retrieval.
   *
   * @param {string} documentId - The unique identifier of the document.
   * @param {QueryParams<LeekSegment>} [queryParams] - Optional parameters for pagination and filtering.
   * @returns {Promise<PaginatedResult<LeekSegment>>} - The paginated result of document segments.
   */
  abstract findManySegmentsPaginatedByDocumentId(
    documentId: string,
    queryParams?: QueryParams<LeekSegment>,
  ): Promise<PaginatedResult<LeekSegment>>;

  /**
   * Retrieve a document segment by its unique ID.
   *
   * This method retrieves a single document segment identified by its unique ID.
   * Returns `null` if no matching segment is found.
   *
   * @param {string} id - The unique identifier of the segment.
   * @returns {Promise<LEEK.Nullable<LeekSegment>>} - The matching document segment, or `null` if not found.
   */
  abstract findSegmentById(id: string): Promise<LEEK.Nullable<LeekSegment>>;

  /**
   * Retrieve a document segment by dataset ID, document ID, and hash value.
   *
   * This method retrieves a document segment associated with the specified dataset ID, document ID, and index node hash.
   * Returns `null` if no matching segment is found.
   *
   * @param {string} datasetId - The unique identifier of the dataset.
   * @param {string} documentId - The unique identifier of the document.
   * @param {string} indexNodeHash - The hash value of the index node.
   * @returns {Promise<LEEK.Nullable<LeekSegment>>} - The matching document segment, or `null` if not found.
   */
  abstract findSegmentByDatasetDocumentAndHash(
    datasetId: string,
    documentId: string,
    indexNodeHash: string,
  ): Promise<LEEK.Nullable<LeekSegment>>;

  /**
   * Retrieve matching hashes for a dataset by hash values.
   *
   * This method retrieves all hash values that match the given list of hashes and are associated
   * with the specified dataset ID.
   *
   * @param {string[]} hashes - An array of hash values.
   * @param {string} datasetId - The unique identifier of the dataset.
   * @returns {Promise<string[]>} - An array of matching hash values.
   */
  abstract findManyHashesByDatasetIdAndHashes(hashes: string[], datasetId: string): Promise<string[]>;

  /**
   * Update a document segment by its unique ID.
   *
   * This method updates the fields of a document segment identified by its unique ID.
   *
   * @param {string} id - The unique identifier of the segment.
   * @param {Partial<LeekSegment>} payload - An object containing the fields to update.
   * @returns {Promise<void>} - Resolves when the update operation is complete.
   */
  abstract updateSegmentById(id: string, payload: Partial<LeekSegment>): Promise<void>;

  /**
   * Update hit counts for document segments by hashes and dataset ID.
   *
   * This method modifies the hit counts for segments associated with the specified dataset ID and hash values.
   *
   * @param {string[]} hashes - An array of hash values.
   * @param {string} datasetId - The unique identifier of the dataset.
   * @returns {Promise<void>} - Resolves when the update operation is complete.
   */
  abstract updateManyHitCountByDatasetIdAndHashes(hashes: string[], datasetId: string);

  /**
   * Delete a document segment by its unique ID.
   *
   * This method deletes a single document segment identified by its unique ID.
   *
   * @param {string} id - The unique identifier of the segment to delete.
   * @returns {Promise<void>} - Resolves when the segment is deleted.
   */
  abstract deleteSegmentById(id: string): Promise<void>;

  /**
   * Delete all document segments for a specific document ID.
   *
   * This method removes all document segments associated with the specified document ID.
   *
   * @param {string} documentId - The unique identifier of the document.
   * @returns {Promise<void>} - Resolves when all related segments are deleted.
   */
  abstract deleteManySegmentsByDocumentId(documentId: string): Promise<void>;

  /**
   * Delete all document segments for a specific dataset ID.
   *
   * This method removes all document segments associated with the specified dataset ID.
   *
   * @param {string} datasetId - The unique identifier of the dataset.
   * @returns {Promise<void>} - Resolves when all related segments are deleted.
   */
  abstract deleteManySegmentsByDatasetId(datasetId: string): Promise<void>;

  /**
   * Count the number of segments for a document.
   *
   * This method counts the total number of segments associated with the specified document ID.
   *
   * @param {string} documentId - The unique identifier of the document.
   * @returns {Promise<number>} - The total number of segments.
   */
  abstract countSegmentsByDocumentId(documentId: string): Promise<number>;
}
